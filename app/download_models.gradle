


task downloadOD1(type: DownloadUrlTask) {
    sourceUrl= "https://tfhub.dev/tensorflow/lite-model/ssd_mobilenet_v1/1/metadata/2?lite-format=tflite"
    target= file("src/main/assets/mobilenetv1.tflite")
    //overwrite =false
}

task downloadOD2(type: DownloadUrlTask) {
    sourceUrl= "https://tfhub.dev/tensorflow/lite-model/efficientdet/lite0/detection/metadata/1?lite-format=tflite"
    target= file("src/main/assets/efficientdet-lite0.tflite")
    //overwrite =false
}

task downloadOD3(type: DownloadUrlTask) {
    sourceUrl= "https://tfhub.dev/tensorflow/lite-model/efficientdet/lite1/detection/metadata/1?lite-format=tflite"
    target= file("src/main/assets/efficientdet-lite1.tflite")
    //overwrite =false
}

task downloadOD4(type: DownloadUrlTask) {
    sourceUrl= "https://tfhub.dev/tensorflow/lite-model/efficientdet/lite2/detection/metadata/1?lite-format=tflite"
    target= file("src/main/assets/efficientdet-lite2.tflite")
   // overwrite =false
}


def targetFolder = "src/main/assets"
def modelFloatDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_2018_02_22/mobilenet_v1_1.0_224.tgz"
def modelQuantDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_2018_08_02/mobilenet_v1_1.0_224_quant.tgz"
def model_inception_v4_float_url = "https://storage.googleapis.com/download.tensorflow.org/models/tflite/model_zoo/upload_20180427/inception_v4_2018_04_27.tgz"
def localCacheFloat = "build/intermediates/mobilenet_v1_1.0_224.tgz"
def localCacheQuant = "build/intermediates/mmobilenet_v1_1.0_224_quant.tgz"
def localCacheInceptionV4Float = "build/intermediates/inception_v4_2018_04_27.tgz"

task downloadModelFloat(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelFloatDownloadUrl}"
    }
    sourceUrl = "${modelFloatDownloadUrl}"
    target = file("${localCacheFloat}")
}

task downloadModelQuant(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelQuantDownloadUrl}"
    }
    sourceUrl = "${modelQuantDownloadUrl}"
    target = file("${localCacheQuant}")
}
task downloadInceptionV4Float(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${model_inception_v4_float_url}"
    }
    sourceUrl = "${model_inception_v4_float_url}"
    target = file("${localCacheInceptionV4Float}")
}

task unzipModelFloat(type: Copy, dependsOn: 'downloadModelFloat') {
    doFirst {
        println "Unzipping ${localCacheFloat}"
    }
    from tarTree("${localCacheFloat}")
    into "${targetFolder}"
}

task unzipModelQuant(type: Copy, dependsOn: 'downloadModelQuant') {
    doFirst {
        println "Unzipping ${localCacheQuant}"
    }
    from tarTree("${localCacheQuant}")
    into "${targetFolder}"
}
task unzipModelInceptionV4Float(type: Copy, dependsOn: 'downloadInceptionV4Float') {
    doFirst {
        println "Unzipping ${localCacheInceptionV4Float}"
    }
    from tarTree("${localCacheInceptionV4Float}")
    into "${targetFolder}"
}

task cleanUnusedFiles(type: Delete, dependsOn: ['unzipModelFloat', 'unzipModelQuant', 'unzipModelInceptionV4Float']) {
    delete fileTree("${targetFolder}").matching {
        include "*.pb"
        include "*.ckpt.*"
        include "*.pbtxt.*"
        include "*.quant_info.*"
        include "*.meta"
    }
}


// Ensure the model file is downloaded and extracted before every build
preBuild.dependsOn unzipModelFloat
preBuild.dependsOn unzipModelQuant
preBuild.dependsOn unzipModelInceptionV4Float
preBuild.dependsOn cleanUnusedFiles
repositories {
    mavenCentral()
}

class DownloadUrlTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}
