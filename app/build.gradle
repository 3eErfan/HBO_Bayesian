apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    //buildToolsVersion "28"
    defaultConfig {
        applicationId "com.arcore.MixedAIAR"
        minSdkVersion 24
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        noCompress "tflite"
    }
//    allprojects {
//        repositories {
//            mavenCentral()
//            maven {  // Only for snapshot artifacts
//                name 'ossrh-snapshot'
//                url 'http://oss.sonatype.org/content/repositories/snapshots'
//            }
//        }}



    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {



    implementation files('libs/guava-31.1-jre.jar')

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0-rc02'
    implementation "com.google.ar.sceneform.ux:sceneform-ux:1.7.0"
    implementation files('libs/Jama-1.0.1.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




   // implementation 'com.android.support.constraint:constraint-layout:2.0.4'
   //implementation 'com.android.support:design:28.0.0'
    //implementation "com.google.ar.sceneform.ux:sceneform-ux:1.7.0"


    implementation 'org.tensorflow:tensorflow-lite-support:0.1.0-rc1'
 //   implementation 'org.tensorflow:tensorflow-lite-metadata:0.1.0-rc1'

    //implementation "com.google.ar.sceneform.ux:sceneform-ux:1.15.0"
   // testImplementation 'junit:junit:4.13.2'
    //androidTestImplementation 'com.android.support.test:runner:1.0.2'
    //androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


  //  implementation fileTree(dir: 'libs', include: ['*.jar'])
   // implementation 'com.android.support:appcompat-v7:28.0.0'
    //implementation 'com.android.support.constraint:constraint-layout:2.0.4'
   // implementation 'com.android.support:design:28.0.0'
   implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'com.android.support:support-v13:28.0.0'
    // Build off of nightly TensorFlow Lite
    implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly-SNAPSHOT'
    implementation 'org.tensorflow:tensorflow-lite-gpu:0.0.0-nightly-SNAPSHOT'

}

apply plugin: 'com.google.ar.sceneform.plugin'



def targetFolder = "src/main/assets"
def modelFloatDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_2018_02_22/mobilenet_v1_1.0_224.tgz"
def modelQuantDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_2018_08_02/mobilenet_v1_1.0_224_quant.tgz"
def localCacheFloat = "build/intermediates/mobilenet_v1_1.0_224.tgz"
def localCacheQuant = "build/intermediates/mmobilenet_v1_1.0_224_quant.tgz"


task downloadModelFloat(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelFloatDownloadUrl}"
    }
    sourceUrl = "${modelFloatDownloadUrl}"
    target = file("${localCacheFloat}")
}

task downloadModelQuant(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelQuantDownloadUrl}"
    }
    sourceUrl = "${modelQuantDownloadUrl}"
    target = file("${localCacheQuant}")
}

task unzipModelFloat(type: Copy, dependsOn: 'downloadModelFloat') {
    doFirst {
        println "Unzipping ${localCacheFloat}"
    }
    from tarTree("${localCacheFloat}")
    into "${targetFolder}"
}

task unzipModelQuant(type: Copy, dependsOn: 'downloadModelQuant') {
    doFirst {
        println "Unzipping ${localCacheQuant}"
    }
    from tarTree("${localCacheQuant}")
    into "${targetFolder}"
}

task cleanUnusedFiles(type: Delete, dependsOn: ['unzipModelFloat', 'unzipModelQuant']) {
    delete fileTree("${targetFolder}").matching {
        include "*.pb"
        include "*.ckpt.*"
        include "*.pbtxt.*"
        include "*.quant_info.*"
        include "*.meta"
    }
}


// Ensure the model file is downloaded and extracted before every build
preBuild.dependsOn unzipModelFloat
preBuild.dependsOn unzipModelQuant
preBuild.dependsOn cleanUnusedFiles

class DownloadUrlTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

//task downloadModelFloat(type: DownloadUrlTask) {
//    doFirst {
//        println "Downloading ${modelFloatDownloadUrl}"
//    }
//    sourceUrl = "${modelFloatDownloadUrl}"
//    target = file("${localCacheFloat}")
//}
//
//task downloadModelQuant(type: DownloadUrlTask) {
//    doFirst {
//        println "Downloading ${modelQuantDownloadUrl}"
//    }
//    sourceUrl = "${modelQuantDownloadUrl}"
//    target = file("${localCacheQuant}")
//}

//task unzipModelFloat(type: Copy, dependsOn: 'downloadModelFloat') {
//    doFirst {
//        println "Unzipping ${localCacheFloat}"
//    }
//    from tarTree("${localCacheFloat}")
//    into "${targetFolder}"
//}
//
//task unzipModelQuant(type: Copy, dependsOn: 'downloadModelQuant') {
//    doFirst {
//        println "Unzipping ${localCacheQuant}"
//    }
//    from tarTree("${localCacheQuant}")
//    into "${targetFolder}"
//}
//
//task cleanUnusedFiles(type: Delete, dependsOn: ['unzipModelFloat', 'unzipModelQuant']) {
//    delete fileTree("${targetFolder}").matching {
//        include "*.pb"
//        include "*.ckpt.*"
//        include "*.pbtxt.*"
//        include "*.quant_info.*"
//        include "*.meta"
//    }
//}


// Ensure the model file is downloaded and extracted before every build
//preBuild.dependsOn unzipModelFloat
//preBuild.dependsOn unzipModelQuant
//preBuild.dependsOn cleanUnusedFiles

//class DownloadUrlTask extends DefaultTask {
//    @Input
//    String sourceUrl
//
//    @OutputFile
//    File target
//
//    @TaskAction
//    void download() {
//        ant.get(src: sourceUrl, dest: target)
//    }
//}

//sceneform.asset('sampledata/models/andy.obj',
//        'default',
//        'sampledata/models/andy.sfa',
//        'src/main/assets/andy')
//
//sceneform.asset('sampledata/models/Cabin.obj',
//        'default',
//        'sampledata/models/Cabin.sfa',
//        'src/main/assets/Cabin')
//
//sceneform.asset('sampledata/models/House.obj',
//        'default',
//        'sampledata/models/House.sfa',
//        'src/main/assets/House')

//sceneform.asset('sampledata/models/airplane/airplane.obj',
//        'default',
//        'sampledata/models/airplane/airplane.sfa',
//        'src/main/assets/airplane')